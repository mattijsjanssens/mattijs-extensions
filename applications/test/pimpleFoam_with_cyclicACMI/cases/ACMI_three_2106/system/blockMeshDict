/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

vertices
(
    // left_bottom
    (0 0.2 0)
    (1 0.2 0)
    (1 1.9 0)
    (0 1.9 0)
    (0 0.2 0.1)
    (1 0.2 0.1)
    (1 1.9 0.1)
    (0 1.9 0.1)

    // right_bottom
    (1 0 0)
    (2 0 0)
    (2 1 0)
    (1 1 0)
    (1 0 0.1)
    (2 0 0.1)
    (2 1 0.1)
    (1 1 0.1)

    // right_top
    (1 1 0)
    (2 1 0)
    (2 3 0)
    (1 3 0)
    (1 1 0.1)
    (2 1 0.1)
    (2 3 0.1)
    (1 3 0.1)

    // left_top
    (0 2 0)
    (1 2 0)
    (1 2.8 0)
    (0 2.8 0)
    (0 2 0.1)
    (1 2 0.1)
    (1 2.8 0.1)
    (0 2.8 0.1)

);

blocks
(
    hex (0 1 2 3 4 5 6 7) left_bottom (2 4 1) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) right_bottom (2 3 1) simpleGrading (1 1 1)
    hex (16 17 18 19 20 21 22 23) right_top (2 3 1) simpleGrading (1 1 1)
    hex (24 25 26 27 28 29 30 31) left_top (2 1 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    walls
    {
        type wall;
        faces
        (
            (3 7 6 2)
            (1 5 4 0)

            (11 15 14 10)
            (9 13 12 8)

            (19 23 22 18)
            (17 21 20 16)

            // left top
            (27 31 30 26)
            (25 29 28 24)
        );
    }
    left
    {
        type wall;
        faces
        (
            (0 4 7 3)
            (24 28 31 27)
        );
    }


    left_bottom_AMI
    {
        type            cyclicACMI;
        nonOverlapPatch left_bottom_blockage;
        faces
        (
            (2 6 5 1)
        );
        inGroups        (cyclicACMI coupleGroup);

        //coupleGroup     coupleGroup;
        neighbourPatch  right_bottom_AMI;

        //method          partialFaceAreaWeightAMI;
    }
    left_bottom_blockage
    {
        type wall;
        faces
        (
            (2 6 5 1)
        );
    }


    left_top_AMI
    {
        type            cyclicACMI;
        nonOverlapPatch left_top_blockage;
        faces
        (
            (26 30 29 25)
        );
        inGroups        (cyclicACMI coupleGroup);

        //coupleGroup     coupleGroup;
        neighbourPatch  right_top_AMI;

        //method          partialFaceAreaWeightAMI;
    }
    left_top_blockage
    {
        type            wall;
        faces
        (
            (26 30 29 25)
        );
    }


    right_bottom_AMI
    {
        type            cyclicACMI;
        nonOverlapPatch right_bottom_blockage;
        faces
        (
            (8 12 15 11)
        );
        inGroups        (cyclicACMI coupleGroup);

        //coupleGroup     coupleGroup;
        neighbourPatch  left_bottom_AMI;

        //method          partialFaceAreaWeightAMI;
    }
    right_bottom_blockage
    {
        type            wall;
        faces
        (
            (8 12 15 11)
        );
    }


    right_top_AMI
    {
        type            cyclicACMI;
        nonOverlapPatch right_top_blockage;
        faces
        (
            (16 20 23 19)
        );
        inGroups        (cyclicACMI coupleGroup);

        //coupleGroup     coupleGroup;
        neighbourPatch  left_bottom_AMI;

        //method          partialFaceAreaWeightAMI;
    }
    right_top_blockage
    {
        type            wall;
        faces
        (
            (16 20 23 19)
        );
    }


    right_bottom_right
    {
        type wall;
        faces
        (
            (10 14 13 9)
        );
    }
    right_top_right
    {
        type wall;
        faces
        (
            (18 22 21 17)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)

            (8 11 10 9)
            (12 13 14 15)

            (16 19 18 17)
            (20 21 22 23)

            (24 27 26 25)
            (28 29 30 31)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //

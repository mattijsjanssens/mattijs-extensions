Two choices:
1. have statically constructed class which
    - installs fileHander in constructor
    - installs dummy/default fileHandler in desctructor
So the moment you 'libs' the library containing the class
it will use your fileHandler

2.
- add fileHandler (as removable!) to runtime selection table:
     addRemovableToRunTimeSelectionTable
     (
         fileOperation,
         autoDecomposingFileOperation,
         word
     );
- have statically constructed class
    - nothing in constructor
    - installs dummy/default fileHandler in destructor
- add to system/controlDict:
    libs    ("libmyFileOperation.so");
    OptimisationSwitches
    {
        fileHandler myFileOperation;
    }

The main thing is to have a static-destructor which destroys the fileHandler
instance.

2) If you're holding references (e.g. unallocatedFvMesh holds reference
to Time) you cannot do this since your file handler only gets deleted
at static destruction time. Solution: make MeshObject!

3) tell paraFoam to use special reader:
    FOAM_LIBS='("libautoDecomposingFileOperation.so")' \
    FOAM_FILEHANDLER=autoReconstructing \
    paraFoam

(paraFoam has been modified to load FOAM_LIBS. We could do the same for
all OpenFOAM apps but generally here we use 'libs' inside system/controlDict)
